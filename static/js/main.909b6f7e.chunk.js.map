{"version":3,"sources":["Debug.js","App.js","serviceWorker.js","index.js","Parser.js"],"names":["Debug","props","onChange","event","value","target","setState","componentDidUpdate","prevProps","prevState","snapshot","state","parse","isEmpty","fields","clean","type","PARSER_TYPE","AUTODETECT","input","length","Parser","then","p","isValid","getFields","catch","e","console","log","setExample","example","preventDefault","JSON","stringify","self","this","className","variant","onClick","demoInput","Group","controlId","Label","Control","as","disabled","Object","keys","map","key","rows","object","i","name","href","EXAMPLES","React","Component","App","src","alt","width","height","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message","GET_ATTESTATION_RESPONSE","arrayToGuid","byteArray","Array","from","byte","toString","slice","join","replace","GetAttestationResponseParser","Promise","res","rej","obj","body","buffer","Buffer","response","attestationObject","cbor","push","fmt","Uint32Array","authData","valid","promises","parsers","any"],"mappings":"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","file":"static/js/main.909b6f7e.chunk.js","sourcesContent":["import React from 'react';\nimport Form from \"react-bootstrap/cjs/Form\";\nimport Badge from \"react-bootstrap/cjs/Badge\";\nimport {Parser, PARSER_TYPE, EXAMPLES} from \"./Parser\";\n\nclass Debug extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isEmpty: true,\n            isValid: true,\n            type: PARSER_TYPE.AUTODETECT,\n            value: \"\",\n            fields: []\n        }\n    }\n\n    onChange = (event) => {\n        let value = event.target.value;\n        this.setState({value: value})\n    }\n\n    componentDidUpdate = (prevProps, prevState, snapshot) => {\n        if (this.state.value !== prevState.value) {\n            this.parse(this.state.value)\n        }\n\n        if (this.state.isEmpty !== prevState.isEmpty && this.state.isEmpty) {\n            this.setState({\n                fields: []\n            })\n        }\n    }\n\n    clean = () => {\n        this.setState({\n            isEmpty: true,\n            fields: [],\n            type: PARSER_TYPE.AUTODETECT\n        })\n    }\n\n    parse = (input) => {\n        if(!input || input.length === 0) {\n            this.clean()\n            return\n        }\n        this.setState({isEmpty: false})\n\n        let parser = new Parser(input);\n        parser.parse()\n            .then(p => {\n                this.setState({\n                    isValid: p.isValid(),\n                    fields: p.getFields(),\n                    type: p.type()\n                })\n            })\n            .catch(e => {\n                console.log(e)\n                this.setState({\n                    isValid: false,\n                    type: PARSER_TYPE.AUTODETECT\n                })\n            })\n    }\n\n    setExample = (e, example) => {\n        e.preventDefault();\n        this.setState({value: JSON.stringify(example, null, ' ')})\n    }\n\n    render() {\n        let self = this\n        return (\n            <div>\n                <div className=\"row\">\n                    <div className=\"col-md-6\">\n                        <h4 className=\"mb-3\">Input\n                            <Badge variant=\"secondary\" onClick={() => this.setState({value: JSON.stringify(this.demoInput, null, ' ')})}>Test</Badge>\n                            <Badge variant=\"secondary\" onClick={() => this.setState({value: \"Invalid input\"})}>Test</Badge>\n                        </h4>\n                        <Form>\n\n                            <div className=\"row\">\n                                <div className=\"col-md-12 mb-1\">\n                                    <Form.Group controlId=\"exampleForm.ControlSelect1\">\n                                        <Form.Label>Type:</Form.Label>\n                                        <Form.Control as=\"select\" value={this.state.type} disabled>\n                                            {Object.keys(PARSER_TYPE).map(function (key) {\n                                                return <option key={key}>{PARSER_TYPE[key]}</option>\n                                            })}\n                                        </Form.Control>\n                                    </Form.Group>\n                                </div>\n                            </div>\n                            <div className=\"row\">\n                                <div className=\"col-md-12 mb-3\">\n                                    <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n                                        <Form.Label>Payload:</Form.Label>\n                                        <Form.Control as=\"textarea\" rows={20} value={this.state.value} onChange={this.onChange}/>\n                                    </Form.Group>\n                                </div>\n                            </div>\n                        </Form>\n                    </div>\n                    <div className=\"col-md-6 mb-4\">\n                        <h4 className=\"d-flex justify-content-between align-items-center mb-3\">\n                            <span>Values</span>\n                        </h4>\n                        <ul className=\"list-group mb-3\">\n\n                            {this.state.isEmpty && <li className=\"list-group-item d-flex justify-content-between lh-condensed\">\n                                <div>\n                                    <h6 className=\"my-0\">No input available</h6>\n                                </div>\n                            </li>}\n                            {!this.state.isValid && !this.state.isEmpty && <li className=\"list-group-item d-flex justify-content-between lh-condensed\">\n                                <div>\n                                    <h6 className=\"my-0\">Input is not valid</h6>\n                                </div>\n                            </li>}\n                            {this.state.isValid && this.state.fields.map(function (object, i) {\n                                return <li key={i} className=\"list-group-item d-flex justify-content-between lh-condensed\">\n                                    <div>\n                                        <h6 className=\"my-0\">{object.name}</h6>\n                                        <small className=\"text-muted\">{object.value}</small>\n                                    </div>\n                                </li>\n                            })}\n                            {/*<li className=\"list-group-item d-flex justify-content-between lh-condensed\">*/}\n                            {/*    <div>*/}\n                            {/*        <h6 className=\"my-0\">Third item</h6>*/}\n                            {/*        <small className=\"text-muted\">Brief description</small>*/}\n                            {/*    </div>*/}\n                            {/*    <span className=\"text-muted\">$5</span>*/}\n                            {/*</li>*/}\n                            {/*<li className=\"list-group-item d-flex justify-content-between bg-light\">*/}\n                            {/*    <div className=\"text-success\">*/}\n                            {/*        <h6 className=\"my-0\">Promo code</h6>*/}\n                            {/*        <small>EXAMPLECODE</small>*/}\n                            {/*    </div>*/}\n                            {/*    <span className=\"text-success\">-$5</span>*/}\n                            {/*</li>*/}\n                            {/*<li className=\"list-group-item d-flex justify-content-between\">*/}\n                            {/*    <span>Total (USD)</span>*/}\n                            {/*    <strong>$20</strong>*/}\n                            {/*</li>*/}\n                        </ul>\n\n                        {/*<form className=\"card p-2\">*/}\n                        {/*    <div className=\"input-group\">*/}\n                        {/*        <input type=\"text\" className=\"form-control\" placeholder=\"Promo code\"/>*/}\n                        {/*        <div className=\"input-group-append\">*/}\n                        {!this.state.isEmpty && this.state.isValid &&\n                        <button type=\"submit\" className=\"btn btn-secondary\">Copy as JSON</button>}\n\n                        {!this.state.isEmpty &&\n                        <button type=\"submit\" className=\"btn btn-warning ml-3\" onClick={() => this.setState({value: \"\"})}>Clean</button>}\n                        {/*</div>*/}\n                        {/*</div>*/}\n                        {/*</form>*/}\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-md-12\">\n                        Currently supported types:\n                        <ul>\n                            {Object.keys(PARSER_TYPE).map(function (key) {\n                                if(PARSER_TYPE[key] !== PARSER_TYPE.AUTODETECT) {\n                                    return <li key={key}>{PARSER_TYPE[key]} - <a href={\"/#\"} onClick={(e) => self.setExample(e, EXAMPLES[key])}>Try now</a> </li>\n                                }\n                                return \"\"\n                            })}\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Debug\n","import React from 'react';\nimport './App.css';\nimport Container from \"react-bootstrap/cjs/Container\";\nimport Debug from \"./Debug\";\n\nfunction App() {\n  return (\n    <Container>\n      <div className=\"py-5 text-center\">\n        <img className=\"d-block mx-auto mb-4\" src=\"/logo512.png\" alt=\"\" width=\"72\" height=\"72\"/>\n          <h1>Webauthn Payload Debugger</h1>\n          <p className=\"lead\">Webauthn (a.k.a. FIDO2) is a protocol to enable authentication using private-public key pairs.</p>\n      </div>\n      <Debug/>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import * as cbor from \"cbor\";\n\nconst PARSER_TYPE = {\n    AUTODETECT: \"Autodetect\",\n    GET_ATTESTATION_RESPONSE: 'Post Attestation JSON (Authenticator -> Relying Party)'\n}\n\nconst EXAMPLES = {\n    GET_ATTESTATION_RESPONSE: {\n        \"rawId\": \"1bDwRDd7k6AqQdojv7AX4lWIEOG0ndZBgkyzNFCB15aGOlrczRD10Seyfjdb7ZNsusrX9KGuUWUzFqm8GqfVsg\",\n        \"response\": {\n            \"attestationObject\": \"o2NmbXRmcGFja2VkZ2F0dFN0bXSjY2FsZyZjc2lnWEcwRQIhAMARFYy6h0-8F8rbOozJfUMLq_a8nylpdPhIkbbZ30CdAiAQk0EAUrBbtTbPsr-J8mWSAed4ibMaVNUmXzN3fiCMLWN4NWOBWQLBMIICvTCCAaWgAwIBAgIEGKxGwDANBgkqhkiG9w0BAQsFADAuMSwwKgYDVQQDEyNZdWJpY28gVTJGIFJvb3QgQ0EgU2VyaWFsIDQ1NzIwMDYzMTAgFw0xNDA4MDEwMDAwMDBaGA8yMDUwMDkwNDAwMDAwMFowbjELMAkGA1UEBhMCU0UxEjAQBgNVBAoMCVl1YmljbyBBQjEiMCAGA1UECwwZQXV0aGVudGljYXRvciBBdHRlc3RhdGlvbjEnMCUGA1UEAwweWXViaWNvIFUyRiBFRSBTZXJpYWwgNDEzOTQzNDg4MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEeeo7LHxJcBBiIwzSP-tg5SkxcdSD8QC-hZ1rD4OXAwG1Rs3Ubs_K4-PzD4Hp7WK9Jo1MHr03s7y-kqjCrutOOqNsMGowIgYJKwYBBAGCxAoCBBUxLjMuNi4xLjQuMS40MTQ4Mi4xLjcwEwYLKwYBBAGC5RwCAQEEBAMCBSAwIQYLKwYBBAGC5RwBAQQEEgQQy2lIHo_3QDmT7AonKaFUqDAMBgNVHRMBAf8EAjAAMA0GCSqGSIb3DQEBCwUAA4IBAQCXnQOX2GD4LuFdMRx5brr7Ivqn4ITZurTGG7tX8-a0wYpIN7hcPE7b5IND9Nal2bHO2orh_tSRKSFzBY5e4cvda9rAdVfGoOjTaCW6FZ5_ta2M2vgEhoz5Do8fiuoXwBa1XCp61JfIlPtx11PXm5pIS2w3bXI7mY0uHUMGvxAzta74zKXLslaLaSQibSKjWKt9h-SsXy4JGqcVefOlaQlJfXL1Tga6wcO0QTu6Xq-Uw7ZPNPnrpBrLauKDd202RlN4SP7ohL3d9bG6V5hUz_3OusNEBZUn5W3VmPj1ZnFavkMB3RkRMOa58MZAORJT4imAPzrvJ0vtv94_y71C6tZ5aGF1dGhEYXRhWMTwGNfJbZKBJKgvVC6ftVMcpZoMm0xOEZ4YUL9_OTOHaUUAAAFPy2lIHo_3QDmT7AonKaFUqABA1bDwRDd7k6AqQdojv7AX4lWIEOG0ndZBgkyzNFCB15aGOlrczRD10Seyfjdb7ZNsusrX9KGuUWUzFqm8GqfVsqUBAgMmIAEhWCDE0jSbfClWuXLB8NunovBbkxZPs3S0VyoQeBCh1DNl3CJYIKBVJs3EhCjpDut2JrHG6vj_HTqn-xXNqpl4bqa8KEbK\",\n            \"clientDataJSON\": \"eyJ0eXBlIjoid2ViYXV0aG4uY3JlYXRlIiwiY2hhbGxlbmdlIjoialdBeXhZYWRsVmYzQVpKamxIcXNqWFIyaEU4ZDJ0TERyNEJ2MFJsSVViZyIsIm9yaWdpbiI6Imh0dHBzOi8vY2VydC5maWRvLnN5Z25wYXkuY29tIiwiY3Jvc3NPcmlnaW4iOmZhbHNlLCJleHRyYV9rZXlzX21heV9iZV9hZGRlZF9oZXJlIjoiZG8gbm90IGNvbXBhcmUgY2xpZW50RGF0YUpTT04gYWdhaW5zdCBhIHRlbXBsYXRlLiBTZWUgaHR0cHM6Ly9nb28uZ2wveWFiUGV4In0\"\n        },\n        \"getClientExtensionResults\": {},\n        \"id\": \"1bDwRDd7k6AqQdojv7AX4lWIEOG0ndZBgkyzNFCB15aGOlrczRD10Seyfjdb7ZNsusrX9KGuUWUzFqm8GqfVsg\",\n        \"type\": \"public-key\"\n    }\n}\n\nclass BaseParser {\n\n    constructor(body) {\n        this.body = body;\n        this.fields = [];\n        this.valid = false;\n    }\n\n    type = () => {\n\n    }\n\n    parse = () => {\n\n    }\n\n    isValid = () => {\n        return this.valid\n    }\n\n    getFields = () => {\n        return this.fields\n    }\n\n}\n\nlet arrayToGuid = (byteArray) => {\n    return Array.from(byteArray, function (byte) {\n        return ('0' + (byte & 0xFF).toString(16)).slice(-2);\n    }).join('').replace(/(.{8})(.{4})(.{4})(.{4})(.{12})/, \"$1-$2-$3-$4-$5\");\n}\n\nclass GetAttestationResponseParser extends BaseParser {\n\n    type = () => PARSER_TYPE.GET_ATTESTATION_RESPONSE\n\n    parse = () => {\n        let self = this\n        return new Promise((res, rej) => {\n            try {\n                let obj = JSON.parse(this.body)\n                // if(!('response' in obj)) return false\n                // if(!('attestationObject' in obj.response)) return false\n                let buffer = Buffer.from(obj.response.attestationObject, \"base64\");\n                cbor.decodeFirst(buffer, function (error, obj) {\n                    console.log(obj)\n                    self.fields.push({name: \"format\", value: obj.fmt})\n\n                    self.fields.push({name: \"counter\", value: new Uint32Array(obj.authData.slice(33, 33 + 4))})\n                    self.fields.push({name: \"aaguid\", value: arrayToGuid(new Uint32Array(obj.authData.slice(32 + 1 + 4, 32 + 1 + 4 + 16)))})\n\n                    self.valid = true\n                    res(self)\n                });\n            } catch (e) {\n                this.valid = false\n                rej(e)\n            }\n        })\n    }\n\n}\n\nclass Parser {\n\n    constructor(input) {\n        this.parsers = [\n            new GetAttestationResponseParser(input)\n        ]\n    }\n\n    parse = () => {\n        var p;\n        let promises = [];\n        for (p of this.parsers) {\n            promises.push(p.parse())\n        }\n        return Promise.any(promises)\n            .then(p => {\n                console.log(`Matched parser ${p.type()}`)\n                return p\n            })\n    }\n\n}\n\nexport {Parser, PARSER_TYPE, EXAMPLES}\n"],"sourceRoot":""}